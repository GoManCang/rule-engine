<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:rabbit="http://www.springframework.org/schema/rabbit"
       xsi:schemaLocation="
            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
            http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.0.xsd
            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
            http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd
            http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit-1.0.xsd">

    <context:annotation-config />
    <context:component-scan base-package="com.ctrip.infosec.rule.rabbitmq" />

    <!-- JMX -->
    <context:mbean-server id="mbeanServer" />
    <context:mbean-export server="mbeanServer" />

    <!-- GlobalConfig -->
    <context:property-placeholder ignore-unresolvable="true"
                                  location="classpath*:/GlobalConfig.properties" />

    <!-- RabbitMQ -->
    <rabbit:connection-factory id="connectionFactory_inner"
                               host="${rabbitmq.inner.host}" virtual-host="${rabbitmq.inner.vhost}"
                               username="${rabbitmq.inner.username}" password="${rabbitmq.inner.password}"/>
    <rabbit:connection-factory id="connectionFactory_event"
                               host="${rabbitmq.event.host}" virtual-host="${rabbitmq.event.vhost}"
                               username="${rabbitmq.event.username}" password="${rabbitmq.event.password}"/>

    <!-- RabbitMQ 消息发送Template -->
    <rabbit:template id="template_datadispatcher" connection-factory="connectionFactory_inner" exchange="infosec.datadispatcher.exchange"/>
    <rabbit:template id="template_offline4j" connection-factory="connectionFactory_inner" exchange="infosec.offline4j.exchange"/>
    <rabbit:template id="template_callback" connection-factory="connectionFactory_event" exchange="infosec.callback.exchange"/>

    <!-- RabbitMQ 消息接收Listener -->
    <!--<task:executor id="rabbitmqConsumerExecutor" pool-size="32"/>
    <rabbit:listener-container connection-factory="connectionFactory_inner"
                               prefetch="1000" acknowledge="auto" task-executor="rabbitmqConsumerExecutor">
        <rabbit:listener ref="rabbitMqMessageHandler" method="handleMessage" queue-names="infosec.ruleengine.queue" />
    </rabbit:listener-container>

    &lt;!&ndash; MessageHandler &ndash;&gt;
    <bean id="rabbitMqMessageHandler" class="com.ctrip.infosec.rule.rabbitmq.RabbitMqMessageHandler" />-->

    <!--callback.queue消息Listener-->
    <task:executor id="callBackConsumerExecutor" pool-size="32"/>
    <rabbit:listener-container connection-factory="connectionFactory_event"
                               prefetch="1000" acknowledge="auto" task-executor="callBackConsumerExecutor">
        <rabbit:listener ref="callBackMessageHandler" method="handleMessage" queue-names="infosec.callback.queue.0031" />
    </rabbit:listener-container>
    <!-- callback.queueMessageHandler -->
    <bean id="callBackMessageHandler" class="com.ctrip.infosec.rule.rabbitmq.CallBackMessageHandler" />


    <!-- SarsMonitor -->
    <bean id="sarsMonitorAdvice" class="com.ctrip.infosec.sars.monitor.aop.SarsMonitorAdvice"/>
    <aop:config proxy-target-class="true">
        <aop:advisor advice-ref="sarsMonitorAdvice" pointcut="execution(* com.ctrip.infosec.rule.rabbitmq.RabbitMqMessageHandler.handleMessage(..))"/>
        <aop:advisor advice-ref="sarsMonitorAdvice" pointcut="execution(* com.ctrip.infosec.rule.rabbitmq.CallbackMessageSender.sendToPD(..))"/>
        <aop:advisor advice-ref="sarsMonitorAdvice" pointcut="execution(* com.ctrip.infosec.rule.rabbitmq.DispatcherMessageSender.sendToDataDispatcher(..))"/>
        <aop:advisor advice-ref="sarsMonitorAdvice" pointcut="execution(* com.ctrip.infosec.rule.rabbitmq.OfflineMessageSender.sendToOffline(..))"/>
        <aop:advisor advice-ref="sarsMonitorAdvice" pointcut="execution(* com.ctrip.infosec.rule.executor.RulesExecutorService.executeSyncRules(..))"/>
        <aop:advisor advice-ref="sarsMonitorAdvice" pointcut="execution(* com.ctrip.infosec.rule.executor.RulesExecutorService.executeAsyncRules(..))"/>
        <aop:advisor advice-ref="sarsMonitorAdvice" pointcut="execution(* com.ctrip.infosec.rule.executor.PreRulesExecutorService.executePreRules(..))"/>
        <aop:advisor advice-ref="sarsMonitorAdvice" pointcut="execution(* com.ctrip.infosec.rule.executor.PostRulesExecutorService.executePostRules(..))"/>
    </aop:config>
    <!-- 
    <bean class="com.ctrip.infosec.sars.monitor.SarsMonitorDeamon" init-method="start">
        <property name="appId" value="100000559"/>
        <property name="postUrl" value="${sars.monitor.rest.url}"/>
    </bean>
	 -->
	 
	 <!-- 规则监控 -->
	<bean class="com.ctrip.infosec.configs.rule.monitor.RuleMonitorSender" init-method="start">
		<property name="url" value="${Configs.RuleMonitor.URL}" />
	</bean>
	 
</beans>